"""
#####################################################################################################################

    Module to clean the dataset scraped from PolitiFact

#####################################################################################################################
"""

import      re
import      json

log_file        = "../res/25-03-14_11-56-57/log.txt"
all_news_file   = "../data/news_tim.json"
sel_news_file   = "../data/news_filter.json"

def read_res_file( fname ):
    """
    Read the log file generated by an execution using the "check_news" mode.
    Extract the YES/NO ratings for all news

    params:
        fname:  [str] filename
    """
    result = {}

    with open( fname, "r") as f:
        for line in f:
            parts = line.strip().split()
            # check if the line has exactly two parts and
            # the key matches a pattern of first letter in [f,t] followed by 3 numbers
            if len( parts ) == 2 and re.fullmatch( r'[ft]\d{3}', parts[ 0 ]):
                key, value      = parts
                # convert YES to True and NO to False
                if value.upper() == "YES":
                    result[ key ]   = True
                elif value.upper() == "NO":
                    result[ key ]   = False
                else:
                    print( f"WARNING: incoherent structure found in: {parts}" )

    ct, cf  = ( 0, 0 )
    print( "Discarding" )
    for k, v in result.items():
        if v:
            print( k )
            if k.startswith( 't' ):
                ct  += 1
            if k.startswith( 'f' ):
                cf  += 1
    print( f"Total: {ct} true, {cf} false")

    return result


def new_json( scores, old_json, new_json ):
    """
    Generate a new json file containing only the selected news

    params:
        scores:     [dict] keys are news id, values are bool (True=discarded news)
        old_json:   [str] json with all news
        new_json:   [str] json with selected news
    """
    with open( old_json, "r" ) as f:
        all_news = json.load( f )

    # filter out news items that are tagged as True in the 'tags' dictionary
    filter_news = [ i for i in all_news if not scores.get( i[ "id" ], True ) ]

    # save the filtered news to a new JSON file
    with open( new_json, "w") as f:
        json.dump( filter_news, f, indent=4 )


# ===================================================================================================================

if __name__ == '__main__':
    r   = read_res_file( log_file )
    new_json( r, all_news_file, sel_news_file )
